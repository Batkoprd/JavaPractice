package main.java.com.company.OOP_1;

public class Box extends Object{
    String color;
    int size;

    public Box(String color, int size) {
        this.color = color;
        this.size = size;
    }


    @Override
    public String toString() {
        /*
        метод toString(), предназначен для преобразования любого объекта в текстовый вид.
        По-умолчанию у любого объекта срабатывает метод toString(), доставшийся ему по
        наследованию от класса Object, и полученная строка печатается в консоль.
        При распечатке объекта, печатается имя его класса, символ @, и хэш-код в
        шестнадцатеричном представлении
         */
        return "Box{" +
                "color='" + color + '\'' +
                ", size=" + size +
                '}';
    }

    @Override
    public boolean equals(Object object) {
        /*
        Метод equals() в классе Object, по-умолчанию сравнивает пару объектов просто через оператор ==.
        Поэтому необходимо переопределять этот метод в наших классах.
         */
        if (this == object) { //Первым условием мы проверяем и не сравниваем ли мы объект самого с собой?
            return true;
        }
        if (!(object instanceof Box another)) {
            /*
            Второе условие проверяет, что объект, переданный в качестве аргумента существует и является
            объектом типа Box, в противном случае говорим что сравнивать бесполезно, и возвращаем false.
             */
            return false;
        }
        //Если же мы дошли до return, то нам осталось только указать по значениям каких полей мы хотим проводить
        // сравнение двух Box (color & size)
        return this.color.equals(another.color) && this.size == another.size;
    }

    @Override
    public int hashCode() { // преобразует объект в какое-нибудь число,
        // у одинаковых по equals объектов хэшКод должен совпадать, у объектов которые не
        // равны по equals нежелательно, чтобы совпадал хэшКод
        // те поля которые используются в рассчете equals должны использоваться и в хэшКод
        return color.length() * 13 + size * 71;
        /*
        Метод hashCode() возвращает число типа int, в зависимости от содержимого объекта.
        Мы не сможем посмотреть стандартную Java реализацию этого метода, так как он написан в нативном
        виде. Если в процессе работы программы у одного и того же объекта (при условии, что он не меняет
        свое состояние) вызывать hashCode(), этот метод должен возвращать одно и то же значение. При
        этом между запусками программы, hashCode у одного и того же объекта необязательно будет
        постоянным (при использовании стандартной реализации).
         */
    }
}


/*
При переопределении методов hashCode() и equals() необходимо обязательно
придерживаться следующего:
- Если объекты равны через метод equals(), то их hashCode() обязательно должны быть
равны;
- Если объекты не равны по equals(), то желательно чтобы их hashCode() отличались, но этого
не всегда удается достичь (так как hashCode() возвращает не уникальное число)
 */